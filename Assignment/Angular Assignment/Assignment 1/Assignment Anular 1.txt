1) What is single page application ?

=> i) An SPA (Single-page application) is a web app implementation that loads only a single web document, and then updates the body content of that single document via JavaScript APIs such as Fetch when different content is to be shown.
ii) This therefore allows users to use websites without loading whole new pages from the server, which can result in performance gains and a more dynamic experience, with some tradeoff disadvantages such as SEO, more effort required to maintain state, implement navigation, and do meaningful performance monitoring.


2) What is typescirpt ?

=> TypeScript is a syntactic superset of JavaScript which adds static typing. This basically means that TypeScript adds syntax on top of JavaScript, allowing developers to add types.


3) Difference between typescript and javascript.

=> - JavaScript:

1) Typing: Dynamically typed.
2) Tools: Limited built-in tools.
3) Syntax: Standard JavaScript syntax.
4) Compatibility: Runs natively in browsers and Node.js.
5) Debugging: May require more debugging and testing.
6) Learning Curve: Easier to learn for beginners due to its simplicity and familiarity.

- TypeScript:

1) Typing: Provides static typing.
2) Tool: Comes with robust tool support, including IDEs and code editors.
3) Syntax: Extends JavaScript syntax with additional features like interfaces, enums, and generics.
4) Compatibility: Needs to be compiled to JavaScript before running, but is backward compatible with JavaScript.
5) Debugging: Stronger typing can help identify errors during development, reducing runtime errors.
6) Learning Curve: May take more time to learn due to additional features and stricter typing.



4) Difference between monolith and microservices architecture.

=> - Monolithic Architecture:

1) Architecture: Single-tier architecture.
2) Size: Large, all components tightly coupled.
3) Deployment: Deployed as a single unit.
4) Scalability: Horizontal scaling can be challenging.
5) Development: Development is simpler initially.
6) Technology: Limited technology choices.
7) Fault Tolerance: Entire application may fail if a part fails.
8) Maintenance: Easier to maintain due to its simplicity.
9) Flexibility: Less flexible as all components are tightly coupled.
10) Communication: Communication between components is faster.

- Microservice Architecture:

1) Architecture: Multi-tier architecture.
2) Size: Small, loosely coupled components.
3) Deployment: Individual services can be deployed independently.
4) Scalability: Easier to scale horizontally.
5) Development: Complex due to managing multiple services.
6) Technology: Freedom to choose the best technology for each service.
7) Fault Tolerance: Individual services can fail without affecting others.
8) Maintenance: Requires more effort to manage multiple services.
9) Flexibility: More flexible as components can be developed, deployed, and scaled independently.
10) Communication: Communication may be slower due to network calls.



5) Why logger is important in production ?

=>

i) Error Tracking: It helps in identifying and tracking errors or bugs that occur in production. With detailed logs, developers can understand the sequence of events that led to an error, making debugging much easier.

ii) System Monitoring: Logs provide real-time insights into the behavior and performance of the system. It allows administrators to monitor key events, helping ensure that everything is running smoothly and that any anomalies are detected early.

iii) Security Auditing: Logs can record important security-related events, such as unauthorized access attempts or changes to critical resources. This is valuable for both detecting breaches and performing security audits.

iv) Troubleshooting: In case of unexpected behavior or system failures, logs provide a historical record of operations, allowing developers to backtrack and identify what caused the issue.



6) What is stable version and diff of all version.

=>

1. AngularJS (2010)
Language: JavaScript
Key Features:
Introduced two-way data binding.
Based on the MVC architecture.
Limited support for mobile applications.
Highly flexible, but performance-intensive due to its binding mechanism.

2. Angular 2 (2016)
Language: TypeScript
Key Features:
Complete rewrite from AngularJS.
Introduced component-based architecture.
Improved dependency injection (DI) system.
Faster and better suited for larger applications.
Limited two-way binding, focusing more on unidirectional data flow.

## There is no Angular 3. The Angular team decided to skip this version to align the version numbers of all core packages.

Here's what happened:
Angular Router was on version 3.x at the time Angular 2 was released. To avoid confusion and to bring all the core packages (like Angular, Router, etc.) to the same version, they jumped directly to Angular 4 from Angular 2.

3. Angular 4 (2017)
Key Features:
Improved animations by separating them into @angular/animations.
Smaller bundles due to template optimizations.
Introduced HTTP Client module, replacing the old HTTP service.
Backward compatible with Angular 2.
Improved ngIf and ngFor directives with conditional support (else).

4. Angular 5 (2017)
Key Features:
Build optimizer for smaller and faster applications.
HttpClient made default for HTTP requests.
RxJS 5.5 with backward compatibility support.
Internationalization (i18n) improvements.
Improved support for service workers and progressive web apps (PWA).

5. Angular 6 (2018)
Key Features:
Introduced Angular Elements to allow Angular components to be used as Web Components.
RxJS 6 updates and compatibility.
New CLI commands such as ng update and ng add for easier project updates and library installation.
Tree-shakable providers for better performance.

6. Angular 7 (2018)
Key Features:
Virtual scrolling for optimized rendering of large lists.
Drag and drop support via the CDK.
CLI Prompts: Prompted users for routing and styles when creating new projects.
Bundle budgets: Ensured apps stay lightweight by warning if size limits are exceeded.

7. Angular 8 (2019)
Key Features:
Ivy renderer as an opt-in feature (improves rendering performance).
Differential loading: Automatically creates two bundles, one for modern browsers and one for legacy browsers.
Dynamic imports for lazy-loaded routes.
Introduced Web Workers support.

8. Angular 9 (2020)
Key Features:
Ivy renderer made the default, resulting in faster builds, smaller bundles, and better debugging.
Improved type checking and CSS binding.
Enhanced AOT (Ahead-of-Time) compilation, enabled by default.
Added YouTube player and Google Maps components.

9. Angular 10 (2020)
Key Features:
Warnings for CommonJS imports to improve bundling performance.
Optional strict settings for more rigorous type checking.
Updated ng update and browser configuration to drop older browser support.
TypeScript 3.9 support.

10. Angular 11 (2020)
Key Features:
Hot Module Replacement (HMR) support via CLI.
Enhanced build and serve reporting.
Webpack 5 experimental support.
Automatic font inlining to optimize font delivery.

11. Angular 12 (2021)
Key Features:
Tailwind CSS support.
ESLint replaces TSLint as the default linter.
Nullish coalescing in templates for handling null and undefined values.
Ivy-based language service enabled by default.

12. Angular 13 (2021)
Key Features:
IE11 support dropped.
Dynamic component creation made easier without the need for ComponentFactoryResolver.
Persistent build cache for faster builds.
TypeScript 4.4 support.

13. Angular 14 (2022)
Key Features:
Typed forms: Forms now support strict typing, improving type safety.
Standalone components: Experimental support for building components without NgModules.
Enhanced template diagnostics.
Angular DevTools improvements.

14. Angular 15 (2022)
Key Features:
Further Ivy optimizations for performance.
Improved router features and more flexible module handling.
Enhanced ng update for upgrading projects.
ES module support.

15. Angular 16 (2023)
Key Features:
Major performance optimizations, especially with change detection and memory management.
Improved lazy loading.
Advanced DevTools for better debugging and performance tracking.
Introduced new signals API for reactivity, replacing the existing change detection system​

16. Angular 17 (2024)
Key Features:
Performance boosts with faster page loads and memory optimizations (up to 30% reduced memory usage).
Material 3 integration, offering a modern design system.
Faster builds with esbuild and optimized TypeScript compilation.
Enhanced lazy loading capabilities for better resource management​

17. Angular 18 (2024)

Key Features:
i) Zoneless Change Detection:
Angular 18 introduces zoneless change detection, which eliminates the need for Zone.js. This leads to improved performance, as change detection can be more efficiently managed.

ii) Partial Hydration:
Angular 18 focuses on enhancing server-side rendering (SSR) with partial hydration, meaning only the required parts of the page are hydrated at first, leading to faster page loads and better user experience for large applications.

iii) Event Replay during Hydration:
One major feature is event replay, which ensures that user interactions (clicks, input changes) made during SSR are not lost once the page is hydrated. This makes interactions smoother as the page transitions from static to dynamic.

iv) Function-based Route Redirects:
This version allows developers to use functions for route redirects, offering more flexible routing logic based on application state or other conditions.

v) Material 3 Support:
Angular 18 continues to refine Material 3, providing more robust theming options and alignment with Google's latest design principles.


7) Life cycle hook in angular.

=> 

In Angular, the component lifecycle refers to the series of stages a component goes through from its creation to its destruction. Understanding these stages helps developers manage state and perform necessary operations at appropriate times. Here’s a summary of the key lifecycle stages:

i) Creation:
The component is created and its properties are initialized. This involves the execution of the constructor, followed by the ngOnChanges() and ngOnInit() lifecycle hooks.

ii) Change Detection:
Angular detects changes to the component's data-bound properties. This process can invoke ngDoCheck(), which allows for custom change detection.

iii)View and Content Initialization:
The component's view is initialized after content is projected into it. This stage includes ngAfterContentInit() and ngAfterViewInit() hooks.

iv) Change Checking for Views and Content:
Angular checks the views and the content for changes after every change detection cycle. This involves the ngAfterContentChecked() and ngAfterViewChecked() hooks.

v) Destruction:
When the component is no longer needed, Angular triggers the ngOnDestroy() lifecycle hook, where developers can clean up resources, such as unsubscribing from observables.

Lifecycle Hook Sequence
ngOnChanges()
ngOnInit()
ngDoCheck()
ngAfterContentInit()
ngAfterContentChecked()
ngAfterViewInit()
ngAfterViewChecked()
ngOnDestroy()


8) Asynchronous and Synchronous in angular

=> 

Synchronous Operations :
i) Definition: Synchronous operations execute in a sequential manner, meaning each operation must complete before the next one begins. This can lead to blocking behavior, where the UI becomes unresponsive if a long-running operation occurs.
ii) Use Case: Synchronous code is useful when immediate results are required, such as simple calculations or data retrieval that doesn't involve waiting for external resources.
Example: In Angular, synchronous operations are typically performed within functions or methods that execute immediately.

Asynchronous Operations :
i) Definition: Asynchronous operations allow the execution of code to continue without waiting for a task to complete. They are essential for non-blocking operations, especially when dealing with I/O tasks such as HTTP requests, timers, or user input.
ii) Use Case: Asynchronous code is crucial for web applications that rely on server interactions. It helps to maintain UI responsiveness 

while waiting for external data.
Example: Angular utilizes Promises, Observables, and async/await for asynchronous programming:
Promises represent a value that may be available now, or in the future, or never. They are used to handle one-time asynchronous operations.
Observables (from RxJS) are used for handling multiple asynchronous events over time, allowing for better control and cancellation of data streams.
async/await syntax provides a more straightforward way to work with asynchronous code, making it easier to read and write.



9) What is Threading ?

=> 

## Key Concepts of Threading:

i) Thread: A thread is the smallest unit of processing that can be scheduled by the operating system. Threads share the same memory space and resources of their parent process, making communication between threads easier but also leading to potential issues such as race conditions.

ii) Multithreading: This is a programming technique that allows multiple threads to exist within a single process, sharing resources but executing independently. Multithreading can lead to more efficient resource utilization and faster program execution.

## Key Concepts Related to Threading in Angular:

i) Single-threaded Execution:
JavaScript, the language on which Angular is built, runs in a single-threaded environment. This means only one operation can be executed at a time, which can lead to blocking behavior if long-running tasks are not managed correctly.



10) What is componant, module and service ?

=>

## Components

- Definition: Components are the fundamental UI building blocks in Angular applications. Each component controls a portion of the user interface (UI) and manages its own view and behavior.

- Structure: A component consists of three main parts:
  - Template: Defines the HTML layout.
  - Class: Contains the properties and methods that define the component’s behavior.
  - Styles: CSS styles specific to the component.

## Module

- Definition: Modules in Angular are containers that group related components, directives, pipes, and services. They help organize an application into cohesive blocks of functionality.
- Root Module: Every Angular application has at least one root module, typically named AppModule, which bootstraps the application. Additional feature modules can be created for better organization and lazy loading.
- NgModule: The NgModule decorator is used to define a module, specifying which components, directives, pipes, and services belong to that module.

## Service

- Definition: Services in Angular are singleton objects that provide specific functionality across the application. They are typically used for sharing data or business logic between components.
- Dependency Injection: Angular's dependency injection (DI) system allows services to be injected into components, making it easy to manage shared resources and functionalities.
- Use Cases: Common use cases for services include fetching data from an API, managing state, or encapsulating business logic.


11) What is promises, observable and async ?

=>

1. Promises
- Definition: A promise is an object representing the eventual completion (or failure) of an asynchronous operation. It is a single-valued object that can be in one of three states: pending, fulfilled, or rejected.
- Usage: Promises are primarily used to handle one-time asynchronous events. You can attach callbacks using .then() for success and .catch() for errors.


2. Observables
- Definition: An observable is a more powerful abstraction than a promise, allowing you to work with multiple values over time. It is part of the RxJS library and can emit values, complete, or error out.
- Usage: Observables are ideal for handling multiple asynchronous events, such as user input, HTTP requests, or any event-driven scenarios. They support operators for transforming, filtering, and composing asynchronous streams.

3. Async / Await
- Definition: async and await are syntactic sugar introduced in ES2017 (ES8) that make working with promises easier. An async function always returns a promise, and await can be used to pause the execution of an async function until a promise is settled.
- Usage: This syntax allows for writing asynchronous code that looks synchronous, improving readability and maintainability.


12) What Authentication, JWT and OAuth ?

=>
1. Authentication
- Definition: Authentication is the process of verifying the identity of a user or system. It ensures that users are who they claim to be before granting access to resources or services.
- Methods: Common authentication methods include:
Username and Password: The most traditional method, requiring users to provide credentials.
- Multi-Factor Authentication (MFA): Adds an extra layer of security by requiring two or more verification factors (e.g., something you know, something you have, or something you are).
Biometric Authentication: Uses physical characteristics (e.g., fingerprints, facial recognition) for verification.

2. JWT (JSON Web Tokens)
- Definition: JWT is an open standard (RFC 7519) used for securely transmitting information between parties as a JSON object. It is often used for authentication and information exchange.
- Structure: A JWT consists of three parts:
Header: Contains metadata about the token, such as the signing algorithm.
- Payload: Contains the claims or information being transmitted (e.g., user information, expiration time).
Signature: Used to verify the authenticity of the token, created by encoding the header and payload with a secret key.

3. OAuth
- Definition: OAuth is an open standard for access delegation commonly used as a way to grant websites or applications limited access to user information without exposing passwords.
- Mechanism: OAuth allows a user to grant a third-party application access to their resources (like photos, contacts) hosted on another service (like Google or Facebook) without sharing their credentials. It uses access tokens to authorize requests.


13) What is Binding and Pipes in Angular ?

=>
1. Binding
Binding in Angular refers to the synchronization between the model (data) and the view (UI). It allows developers to keep the UI in sync with the underlying data model seamlessly. There are four main types of data binding in Angular:

- Interpolation: This is the simplest form of binding, allowing you to display component properties in the template using double curly braces ({{ }}).
<h1>{{ title }}</h1>

- Property Binding: This binds the value of a property of a DOM element to a component property.
<img [src]="imageUrl">

- Event Binding: This binds events from the view to methods in the component. It allows you to listen to user events (like clicks).
<button (click)="onClick()">Click Me</button>

- Two-Way Binding: This combines property and event binding to create a two-way data flow. It is often used with forms
<input [(ngModel)]="username">

2. Pipes
Pipes in Angular are a way to transform data for display in the UI. They allow you to format data directly in your templates. Angular provides several built-in pipes, and you can also create custom pipes. Here are some common built-in pipes:

- DatePipe: Formats a date value according to locale rules.
<p>{{ today | date }}</p>

- CurrencyPipe: Formats a number as currency.
<p>{{ amount | currency:'USD':'symbol' }}</p>

- DecimalPipe: Formats a number as decimal.
<p>{{ decimalValue | number:'1.2-2' }}</p>



14) How to consume endpoint in Angular ?

=>

Step 1: Import HttpClientModule
First, ensure that you import HttpClientModule in your main application module (usually app.module.ts).

typescript
Copy code
import { HttpClientModule } from '@angular/common/http';

@NgModule({
  declarations: [/* your components */],
  imports: [
    BrowserModule,
    HttpClientModule  // Add this line
  ],
  providers: [],
  bootstrap: [/* your bootstrap component */]
})
export class AppModule {}

Step 2: Create a Service
Next, create a service to handle API calls. You can generate a service using Angular CLI:

ng generate service api
In your service file (e.g., api.service.ts), you can set up methods to make HTTP requests.

import { Injectable } from '@angular/core';
import { HttpClient } from '@angular/common/http';
import { Observable } from 'rxjs';

@Injectable({
  providedIn: 'root'
})
export class ApiService {
  private apiUrl = 'https://api.example.com/data';  // Replace with your API endpoint

  constructor(private http: HttpClient) {}

  getData(): Observable<any> {
    return this.http.get<any>(this.apiUrl);
  }
}

Step 3: Inject the Service into a Component
You can now use this service in any component. Here’s how to inject and use the service in a component (e.g., app.component.ts):

import { Component, OnInit } from '@angular/core';
import { ApiService } from './api.service';

@Component({
  selector: 'app-root',
  template: `<div *ngIf="data">{{ data | json }}</div>`,
})
export class AppComponent implements OnInit {
  data: any;

  constructor(private apiService: ApiService) {}

  ngOnInit() {
    this.apiService.getData().subscribe(
      response => {
        this.data = response;
      },
      error => {
        console.error('Error fetching data', error);
      }
    );
  }
}

Step 4: Handle Errors
It's essential to handle errors that might occur during the HTTP request. You can add error handling in the subscribe method as shown above, or you can create a more sophisticated error-handling strategy.


15) What is proof of concept ?

=> 

A Proof of Concept (PoC) is a demonstration, often in the form of a prototype, designed to validate the feasibility or viability of a certain idea or concept. It aims to prove that an idea can be transformed into a working model and typically serves as a preliminary step in the development process.


16) What is dependency injection in Angular ?

=> 

Dependency Injection (DI) is a design pattern and a core concept in Angular that allows for the development of loosely coupled components and services. Here’s an overview of how it works and its significance in Angular:

  - Definition: Dependency Injection is a technique where an object or function receives its dependencies from an external source rather than creating them itself. In Angular, this means that services, components, and other classes can request the services they depend on rather than instantiating them directly.
  - Purpose: The main goal of DI is to promote modularity, reusability, and testability in applications. By decoupling components from their dependencies, you can easily swap implementations, mock dependencies in tests, and manage shared resources.

## How Dependency Injection Works in Angular

- Providers: In Angular, you define providers that tell the DI framework how to create an instance of a dependency. Providers can be defined in modules or at the component level.

- Injectors: Angular uses injectors to create instances of services. The root injector is created when the application starts, and it can create instances of services registered at the root level.

- Constructor Injection: Dependencies are usually injected into a class via its constructor. For example:

import { Injectable } from '@angular/core';

@Injectable({
  providedIn: 'root'
})
export class MyService {
  getData() {
    return 'Data from service';
  }
}

import { Component } from '@angular/core';
import { MyService } from './my.service';

@Component({
  selector: 'app-my-component',
  template: '<h1>{{ data }}</h1>',
})
export class MyComponent {
  data: string;

  constructor(private myService: MyService) {
    this.data = myService.getData();
  }
}
